<?xml version="1.0" encoding="UTF-8"?>

<!-- configuration是配置文件的根节点，共三个属性。
        debug:默认为false，设为true，将打印logback内部日志信息，实时查看logback运行状态。
        scan：默认值为true，设置为true时，配置文件如果发生改变，将会被重新加载。
        scanPeriod：当 scan 为 true 时，此属性才会生效。设置扫描配置文件是否有修改的时间间隔，默认单位是毫秒。默认的时间间隔为1分钟（60 second）
 -->
<configuration debug="true">

    <!--定义日志文件的存储目录，勿在 LogBack 的配置中使用相对路径 -->
    <property name="LOG_HOME" value="D://Java" />
    <!-- 定义日志文件的存储文件夹 -->
    <property name="LOG_PATH" value="logs/bbs" />
    <!-- 定义日志文件的文件名 -->
    <property name="LOG_NAME" value="bbs" />
    <!-- 定义日志级别， TRACE < DEBUG < INFO < WARN < ERROR-->
    <property name="LOGGING_LEVEL" value="DEBUG" />

    <!-- appender是负责写日志的组件。name指定appender名称，供后面logger设置引用。class指定appender全限定名 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- ConsoleAppender将日志输出到控制台，或者更确切地说是输出到 System.out（默认）或 System.err-->
        <Target>System.out</Target>
        <!-- encoder对日志进行格式化 -->
        <encoder>
            <!-- 格式化输出：
                    %-5level:级别从左显示5个字符宽度
                    %p:日志级别,效果同 %-5level
                    %d:日期{yyyy是年，MM是月，dd是天，HH是24小时制，而hh是12小时制，mm是分，ss是秒，SSS是毫秒
                    %c:类的完整名称，带包名
                    %file:类名，不带包名
                    %M:method
                    %t或%thread:线程名称
                    %m或%msg:日志消息
                    %L:行号
                    %line:行号
                    %n:换行
                    %i:索引,从数字0开始递增
                    [输出的日志外加不加括号]
                    %logger{56}:logger是class的全名,后面的数字代表限制最长的字符。下面有图示
            -->
            <pattern>[%d{yyyy-MM-dd hh:mm:ss:SSS}] [%-5level] [ %-5thread ] [%logger{56}:%M:%L] [%m] %n</pattern>
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
            <charset>UTF-8</charset>
        </encoder>
        <!-- filter对日志进行过滤，默认是info级别的 -->
         <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
         <level>info</level>
         </filter>
    </appender>

    <appender name="STDERR" class="ch.qos.logback.core.ConsoleAppender">
        <Target>System.err</Target>
        <encoder>
            <!-- 带中文前缀的日志输出，注释掉。 -->
<!--            <pattern>[%d{yyyy-MM-dd hh:mm:ss:SSS}] [%-5level] [ %-5thread] [类名：%logger{56}；方法名:%M；行数:%L] [日志：%m] %n</pattern>-->

            <!-- 格式二 -->
<!--            <pattern>[%d{yyyy-MM-dd hh:mm:ss:SSS}] [%-5level] [ %-5thread] [%c:%M:%L] [%m] %n</pattern>-->

            <pattern>[%d{yyyy-MM-dd hh:mm:ss:SSS}] [%-5level] [ %-5thread ] [%logger{56}:%M:%L] [%m] %n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log -->
    <!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名-->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- file:被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。 -->
        <File>${LOG_HOME}/${LOG_PATH}/${LOG_NAME}.log</File>
        <!-- append=true，追加日志。append=false，覆盖日志 -->
        <Append>true</Append>

        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天生成日志文件，并按日期存放。 -->
            <fileNamePattern>${LOG_HOME}/${LOG_PATH}/%d{yyyy-MM-dd}/${LOG_NAME}.%d{yyyy-MM-dd}.log.%i.gz</fileNamePattern>
            <!-- 每个日志文件最多保留60天 -->
            <maxHistory>60</maxHistory>
            <!-- SizeAndTimeBasedRollingPolicy 根据文件大小和时间制定滚动策略，既负责滚动也负责触发滚动。 -->
            <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->
                <maxFileSize>1MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>[%d{yyyy-MM-dd hh:mm:ss:SSS}] [%-5level] [ %-5thread ] [%logger{56}:%M:%L] [%m] %n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- root:定义日志的level、appender，且最多只能配置一个 -->
    <!-- 定义了DEBUG及以上级别的日志，分别在文件和控制台输出 -->
    <root level="${LOGGING_LEVEL}">
    <!-- 注释下面一行，控制台只有info级别的，因为STDOUT中有filter -->
        <appender-ref ref="STDERR"/>
<!--        <appender-ref ref="STDOUT"/>-->
        <appender-ref ref="FILE"/>
    </root>
</configuration>